#version 450 core  

in vec2 fragTexCoord;
in vec3 fragPos;
in vec3 fragNormal;
                                               
out vec4 color;

uniform float currentTime;
uniform sampler2D texture1;
uniform sampler2D texture2;

uniform float ambientStrength;
uniform vec3 ambientColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform float lightSpecStrength;
uniform vec3 camPos;
uniform float shininess;
uniform vec3 rimColor;
                                             
void main() 
{ 
	vec3 ambient = ambientStrength * ambientColor;

	//Light Direction
	vec3 norm = normalize(fragNormal);
	vec3 lightDir = normalize(fragPos - lightPos);

	//Diffuse Coloring
	float diffuseStrength = max(dot(norm, -lightDir), 0.0f);
	vec3 diffuse = diffuseStrength * lightColor;
	//diffuse = fragNormal;

	//Specular Highlight
	vec3 negViewDir = normalize(camPos - fragPos);
	vec3 halfwayVec = normalize(-lightDir + negViewDir);
	float spec = pow(max(dot(norm, halfwayVec), 0.0f), shininess);
	vec3 specular = lightSpecStrength * spec * lightColor;

	//Rim Lighting
	float rimFactor = 1.0 - dot(norm, negViewDir);
	rimFactor = smoothstep(0.0f, 1.0f, rimFactor);
	rimFactor = pow(rimFactor, 4);
	vec3 rim = rimFactor * rimColor * lightColor; 

	if(sin(currentTime) > 0)
	{
		color = vec4(ambient + diffuse + specular + rim, 1.0f) * texture(texture1, fragTexCoord);
	}
	else
	{
		color = vec4(ambient + diffuse + specular + rim, 1.0f) * texture(texture2, fragTexCoord);
	}
}